''''
3¬™ Quest√£o: Implemente o m√©todo da bissec√ß√£o usando a linguagem de
programa√ß√£o Python. O algoritmo deve fornecer como resposta se uma
fun√ß√£o escolhida pelo usu√°rio possui ou n√£o raiz em um intervalo [a, b]
escolhido tamb√©m pelo usu√°rio. Cuide para que seu algoritmo analise todas
as possibilidades acerca da escolha da raiz. A quantidade de intera√ß√µes do
algoritmo n√£o pode ser superior a

Onde a e b s√£o os extremos do intervalo e ùúÄ a precis√£o do problema. Me√ßa
tamb√©m o tempo de execu√ß√£o e a quantidade de itera√ß√µes necess√°rias para
encontrar a raiz.
'''
import math

def f(x):
    return x * x + x - 6.0

# Precis√£o
eps = 0.001

def bis(a, b, k=None, iterations=0):
    if k is None:
        # Calcula o n√∫mero m√°ximo de itera√ß√µes te√≥rico para a precis√£o dada
        k = math.ceil((math.log(b - a) - math.log(eps)) / math.log(2))
    
    c = (a + b) / 2  # Ponto m√©dio do intervalo
    
    # Verifica√ß√µes de parada (ra√≠zes nos extremos)
    if abs(f(a)) < eps:
        return a, iterations + 1
    elif abs(f(b)) < eps:
        return b, iterations + 1

    # Verifica se o n√∫mero de itera√ß√µes foi excedido
    if k < 0:
        return None, iterations + 1

    if abs(f(c)) < eps:
        return c, iterations + 1

    # Recurs√£o nos subintervalos (Caso haja ra√≠zes nos subintervalos)
    if f(a) * f(c) < 0:
        return bis(a, c, k - 1, iterations + 1)
    elif f(c) * f(b) < 0:
        return bis(c, b, k - 1, iterations + 1)
    
    # Recurs√£o nos subintervalos (Caso n√£o haja ra√≠zes nos subintervalos)
    r1 = bis(a, c, k-1)
    r2 = bis(c, b, k-1)
    
    if r1 is None:
        return r2
    elif r2 is None:
        return r1
    # Caso haja mais de uma raiz nos subintervalos, retorna a raiz mais pr√≥xima de 0
    else:
        return min(abs(f(r1)), abs(f(r2)))


# Testando a fun√ß√£o
raiz, total_iteracoes = bis(0, 3)

# Imprimindo a raiz e o total de itera√ß√µes
print(f"Raiz encontrada pelo m√©todo da bissec√ß√£o: {raiz} em {total_iteracoes} itera√ß√µes")